cmake_minimum_required(VERSION 3.10)  # Define a versão mínima do CMake
project(VideoServer)                   # Define o nome do projeto

# Define o C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Adiciona diretórios onde o CMake irá procurar por headers
include_directories(include)

# Adiciona o executável
add_executable(VideoServer src/main.cpp)

# Especifique a localização dos módulos CMake
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules" ${CMAKE_MODULE_PATH})

# Encontrar o pacote FFmpeg
find_package(PkgConfig REQUIRED)
pkg_check_modules(AVUTIL REQUIRED libavutil)

include_directories(${AVUTIL_INCLUDE_DIRS})
link_directories(${AVUTIL_LIBRARY_DIRS})
add_definitions(${AVUTIL_CFLAGS_OTHER})

# Quando for vincular sua aplicação:


# Packages
# Link com outras bibliotecas se necessário
# target_link_libraries(VideoServer other_library)

# Threads
find_package(Threads REQUIRED)

# SDL2 
find_package(SDL2 REQUIRED)

# SFML 
find_package(SFML 2.5 COMPONENTS graphics window system REQUIRED)

# ██████╗  ██████╗  ██████╗ ███████╗████████╗   ██╗ ██████╗ 
# ██╔══██╗██╔═══██╗██╔═══██╗██╔════╝╚══██╔══╝   ██║██╔═══██╗
# ██████╔╝██║   ██║██║   ██║███████╗   ██║      ██║██║   ██║
# ██╔══██╗██║   ██║██║   ██║╚════██║   ██║      ██║██║   ██║
# ██████╔╝╚██████╔╝╚██████╔╝███████║   ██║   ██╗██║╚██████╔╝
# ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝   ╚═╝   ╚═╝╚═╝ ╚═════╝ 

find_package(Boost REQUIRED COMPONENTS system)
message(STATUS "Boost includes: ${Boost_INCLUDE_DIRS}")

# target_link_libraries(VideoServer PRIVATE ${Boost_LIBRARIES})
# target_include_directories(VideoServer PRIVATE ${Boost_INCLUDE_DIRS})

# ███████╗███████╗███╗   ███╗██████╗ ███████╗ ██████╗ 
# ██╔════╝██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝ 
# █████╗  █████╗  ██╔████╔██║██████╔╝█████╗  ██║  ███╗
# ██╔══╝  ██╔══╝  ██║╚██╔╝██║██╔═══╝ ██╔══╝  ██║   ██║
# ██║     ██║     ██║ ╚═╝ ██║██║     ███████╗╚██████╔╝
# ╚═╝     ╚═╝     ╚═╝     ╚═╝╚═╝     ╚══════╝ ╚═════╝ 
# 
# Definindo o caminho para as bibliotecas FFmpeg instaladas pelo Homebrew
set(FFmpeg_DIR "/opt/homebrew/Cellar/ffmpeg/7.0_1") # find_package(FFmpeg REQUIRED)

# Incluir diretórios de cabeçalhos FFmpeg
include_directories(${FFmpeg_DIR}/include)
message(STATUS "FFmpeg include dir: ${FFmpeg_DIR}")

# Linkar diretórios de bibliotecas FFmpeg
link_directories(${FFmpeg_DIR}/lib)

# Especificar as bibliotecas FFmpeg para vincular
# target_link_libraries(VideoServer libavcodec libavformat libavutil libswscale)
# find_package(FFmpeg REQUIRED COMPONENTS AVCODEC AVFORMAT AVUTIL AVDEVICE)

find_path(AVCODEC_INCLUDE_DIR libavcodec/avcodec.h)
find_library(AVCODEC_LIBRARY avcodec)

if(NOT AVCODEC_INCLUDE_DIR)
    message(FATAL_ERROR "AVCODEC include directory not found")
endif()

find_path(AVFORMAT_INCLUDE_DIR libavformat/avformat.h)
find_library(AVFORMAT_LIBRARY avformat)

if(NOT AVFORMAT_INCLUDE_DIR)
    message(FATAL_ERROR "AVCODEC include directory not found")
endif()
 
find_path(AVUTIL_INCLUDE_DIR libavutil/avutil.h)
find_library(AVUTIL_LIBRARY avutil)

if(NOT AVCODEC_LIBRARY)
    message(FATAL_ERROR "AVCODEC library not found")
endif()


### 

target_include_directories(VideoServer PRIVATE
    ${SDL2_INCLUDE_DIRS}
    ${Boost_INCLUDE_DIRS} 
    ${AVCODEC_INCLUDE_DIR} 
    ${AVFORMAT_INCLUDE_DIR} 
    ${AVUTIL_INCLUDE_DIR}
)

target_link_libraries(VideoServer 
    sfml-graphics 
    sfml-audio
    ${Boost_LIBRARIES}
    ${AVCODEC_LIBRARY}
    ${AVFORMAT_LIBRARY} 
    ${AVUTIL_LIBRARY}
    Threads::Threads
)

enable_testing()
add_executable(testMyApp test_main.cpp)
add_test(NAME MyTest COMMAND testMyApp)



# find_path(AVCODEC_INCLUDE_DIR libavcodec/avcodec.h)
# find_library(AVCODEC_LIBRARY avcodec)

# find_path(AVFORMAT_INCLUDE_DIR libavformat/avformat.h)
# find_library(AVFORMAT_LIBRARY avformat)

# find_path(AVUTIL_INCLUDE_DIR libavutil/avutil.h)
# find_library(AVUTIL_LIBRARY avutil)

# # Include directories
# include_directories(${Boost_INCLUDE_DIRS})
# include_directories(${AVCODEC_INCLUDE_DIR} ${AVFORMAT_INCLUDE_DIR} ${AVUTIL_INCLUDE_DIR})
